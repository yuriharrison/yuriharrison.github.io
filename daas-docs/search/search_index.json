{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the DAAS Docs The DAAS goal is to provide authentication to the whole Automation's microservice cluster. Content INSTALLATION Tutorials: Authenticating user with Django Rest Framework Concepts Authentication is not Authorization Authentication is the process of ascertaining that somebody really is who he claims to be. Meaning, verifying who's logging to the system. Authorization refers to rules that determine who is allowed to do what. Meaning, checking the user privilege to access, edit or write data, execute some process... DAAS only provides authentication. Authorization being a specific matter of each application, don't forget to implement it to ensure security.","title":"Home"},{"location":"#welcome-to-the-daas-docs","text":"The DAAS goal is to provide authentication to the whole Automation's microservice cluster.","title":"Welcome to the DAAS Docs"},{"location":"#content","text":"INSTALLATION Tutorials: Authenticating user with Django Rest Framework","title":"Content"},{"location":"#concepts","text":"","title":"Concepts"},{"location":"#authentication-is-not-authorization","text":"Authentication is the process of ascertaining that somebody really is who he claims to be. Meaning, verifying who's logging to the system. Authorization refers to rules that determine who is allowed to do what. Meaning, checking the user privilege to access, edit or write data, execute some process... DAAS only provides authentication. Authorization being a specific matter of each application, don't forget to implement it to ensure security.","title":"Authentication is not Authorization"},{"location":"database/","text":"Database Docker If you don't have docker installed follow the steps bellow. If you already have, jump to the next topic. Installing Docker Installing it: sudo apt-get install docker.io Starting Docker service and ensuring that it keeps running after o.s. restart: sudo systemctl start docker sudo systemctl enable docker Be sure you are using a +18.09.x version: sudo docker --version At this point, you should be able to run a container. PostgreSQL Container If you don't have a running postgres container yet, follow the steps bellow. If you already have postgres running jump to the next topic. Pull PostgreSQL image, for testing purposes: sudo docker image pull postgres : 11 . 2 Start PostgreSQL container (persistent database), for the first time: sudo docker run - p 5432 : 5432 - d \\ - e POSTGRES_PASSWORD = postgres \\ - e POSTGRES_USER = postgres \\ - e POSTGRES_DB = daas_db \\ --name postgres_container \\ - v pgdata : / var / lib / postgresql / data postgres : 11 . 2 Remember that -e parameters as environment variables. User and password defined here must be configured at your project, so check it out if you have to troubleshoot. If you need to stop PostgreSQL container: sudo docker container stop - t 1 postgres_container Starting PostgreSQL container (from second time on): sudo docker container start postgres_container Creating the database and application user Next, you need to create the database and user which the DAAS project will use. You can do that by executing the SQL command below. create database daas_db ; create user daas_user with encrypted password 'daas_pass' ; grant all privileges on database daas_db to daas_user ; Ok, now your DB is ready.","title":"Database"},{"location":"database/#database","text":"","title":"Database"},{"location":"database/#docker","text":"If you don't have docker installed follow the steps bellow. If you already have, jump to the next topic.","title":"Docker"},{"location":"database/#installing-docker","text":"Installing it: sudo apt-get install docker.io Starting Docker service and ensuring that it keeps running after o.s. restart: sudo systemctl start docker sudo systemctl enable docker Be sure you are using a +18.09.x version: sudo docker --version At this point, you should be able to run a container.","title":"Installing Docker"},{"location":"database/#postgresql-container","text":"If you don't have a running postgres container yet, follow the steps bellow. If you already have postgres running jump to the next topic. Pull PostgreSQL image, for testing purposes: sudo docker image pull postgres : 11 . 2 Start PostgreSQL container (persistent database), for the first time: sudo docker run - p 5432 : 5432 - d \\ - e POSTGRES_PASSWORD = postgres \\ - e POSTGRES_USER = postgres \\ - e POSTGRES_DB = daas_db \\ --name postgres_container \\ - v pgdata : / var / lib / postgresql / data postgres : 11 . 2 Remember that -e parameters as environment variables. User and password defined here must be configured at your project, so check it out if you have to troubleshoot. If you need to stop PostgreSQL container: sudo docker container stop - t 1 postgres_container Starting PostgreSQL container (from second time on): sudo docker container start postgres_container","title":"PostgreSQL Container"},{"location":"database/#creating-the-database-and-application-user","text":"Next, you need to create the database and user which the DAAS project will use. You can do that by executing the SQL command below. create database daas_db ; create user daas_user with encrypted password 'daas_pass' ; grant all privileges on database daas_db to daas_user ; Ok, now your DB is ready.","title":"Creating the database and application user"},{"location":"installation/","text":"Installation Clone the repository git clone git@github.com Environment First of all you need to make sure your linux environment is ready. To do that you need to install the project dependencies and create a virtual environment. Linux environment This project is being developed on the company standard Linux Ubuntu 18.04 . To install Linux dependencies run: make os-requirements Create a Virtual Environment Now, to setup your python virtual environment, please read this . Database To run the application you need a database. To setup a database with docker you can read this Python dependencies With your virtual environment set, activate your virtual environment and install all python dependencies by running the command: make requirements Updating the database This application is using Django, Django handles database versioning. So, to update the database run the command: make migrate Start the application Now you should be ready to run the application it self. make runserver By default the API will run at localhost:8099 . If you hit the address in your browser you should see the API Documentation.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#clone-the-repository","text":"git clone git@github.com","title":"Clone the repository"},{"location":"installation/#environment","text":"First of all you need to make sure your linux environment is ready. To do that you need to install the project dependencies and create a virtual environment.","title":"Environment"},{"location":"installation/#linux-environment","text":"This project is being developed on the company standard Linux Ubuntu 18.04 . To install Linux dependencies run: make os-requirements","title":"Linux environment"},{"location":"installation/#create-a-virtual-environment","text":"Now, to setup your python virtual environment, please read this .","title":"Create a Virtual Environment"},{"location":"installation/#database","text":"To run the application you need a database. To setup a database with docker you can read this","title":"Database"},{"location":"installation/#python-dependencies","text":"With your virtual environment set, activate your virtual environment and install all python dependencies by running the command: make requirements","title":"Python dependencies"},{"location":"installation/#updating-the-database","text":"This application is using Django, Django handles database versioning. So, to update the database run the command: make migrate","title":"Updating the database"},{"location":"installation/#start-the-application","text":"Now you should be ready to run the application it self. make runserver By default the API will run at localhost:8099 . If you hit the address in your browser you should see the API Documentation.","title":"Start the application"},{"location":"virtual-env/","text":"Python environment Installing Python 3.7.3 Pyenv Installing Pyenv: curl - L https : // raw . githubusercontent . com / pyenv / pyenv - installer / master / bin / pyenv - installer | bash Add the following lines into your ~/.bashrc . This instruction below will be shown after installing pyenv (command above). export PATH = \"~/.pyenv/bin:$PATH\" eval \"$(pyenv init -)\" eval \"$(pyenv virtualenv-init -)\" To make the change effective. Source the .bashrc . source ~/ . bashrc Install Python 3.7.3 (it can take some minutes): pyenv install 3 . 7 . 3 Creating your virtual environment (virtualenv): Well, now you have Python 3.7.3 on your machine. Thus, makes possible for you to create a virtualenv with this version: Tip: Create the virtualenv out side the project repository file to avoid IDE file conflicts. virtualenv venv --python=/home/your_user/.pyenv/versions/3.7.3/bin/python3.7 you can now activate it: source venv / bin / activate","title":"Python environment"},{"location":"virtual-env/#python-environment","text":"","title":"Python environment"},{"location":"virtual-env/#installing-python-373","text":"","title":"Installing Python 3.7.3"},{"location":"virtual-env/#pyenv","text":"Installing Pyenv: curl - L https : // raw . githubusercontent . com / pyenv / pyenv - installer / master / bin / pyenv - installer | bash Add the following lines into your ~/.bashrc . This instruction below will be shown after installing pyenv (command above). export PATH = \"~/.pyenv/bin:$PATH\" eval \"$(pyenv init -)\" eval \"$(pyenv virtualenv-init -)\" To make the change effective. Source the .bashrc . source ~/ . bashrc Install Python 3.7.3 (it can take some minutes): pyenv install 3 . 7 . 3","title":"Pyenv"},{"location":"virtual-env/#creating-your-virtual-environment-virtualenv","text":"Well, now you have Python 3.7.3 on your machine. Thus, makes possible for you to create a virtualenv with this version: Tip: Create the virtualenv out side the project repository file to avoid IDE file conflicts. virtualenv venv --python=/home/your_user/.pyenv/versions/3.7.3/bin/python3.7 you can now activate it: source venv / bin / activate","title":"Creating your virtual environment (virtualenv):"},{"location":"tutorials/drf/","text":"Authenticating user with Django Rest Framework To authenticate users in your Django DRF application using DAAS. You just need to create a custom Authentication Class. Custom Authentication Class Create a file authentication.py . import jwt from django.conf import settings from django.contrib.auth.models import User from rest_framework.authentication import BaseAuthentication from rest_framework.exceptions import AuthenticationFailed class DAASAuthentication ( BaseAuthentication ): def authenticate ( self , request ): header_token = request . META . get ( 'HTTP_AUTHORIZATION' ) if not header_token : return None try : bearer , token = header_token . split () if bearer != 'Bearer' : raise payload = jwt . decode ( token , settings . DAAS_KEY , verify = True , algorithms = [ 'RS256' , ] ) if payload [ 'token_type' ] != 'access' : raise return User ( id = payload [ 'user_id' ]), payload except BaseException : raise AuthenticationFailed ( 'Invalid Token!' ) Settings Now in settings.py set the new Authentication class. ... REST_FRAMEWORK = { ... 'DEFAULT_AUTHENTICATION_CLASSES' : ( 'YOUR_APP.authentication.DAASAuthentication' , ), ... } ... This is all.","title":"Authenticating user with Django Rest Framework"},{"location":"tutorials/drf/#authenticating-user-with-django-rest-framework","text":"To authenticate users in your Django DRF application using DAAS. You just need to create a custom Authentication Class.","title":"Authenticating user with Django Rest Framework"},{"location":"tutorials/drf/#custom-authentication-class","text":"Create a file authentication.py . import jwt from django.conf import settings from django.contrib.auth.models import User from rest_framework.authentication import BaseAuthentication from rest_framework.exceptions import AuthenticationFailed class DAASAuthentication ( BaseAuthentication ): def authenticate ( self , request ): header_token = request . META . get ( 'HTTP_AUTHORIZATION' ) if not header_token : return None try : bearer , token = header_token . split () if bearer != 'Bearer' : raise payload = jwt . decode ( token , settings . DAAS_KEY , verify = True , algorithms = [ 'RS256' , ] ) if payload [ 'token_type' ] != 'access' : raise return User ( id = payload [ 'user_id' ]), payload except BaseException : raise AuthenticationFailed ( 'Invalid Token!' )","title":"Custom Authentication Class"},{"location":"tutorials/drf/#settings","text":"Now in settings.py set the new Authentication class. ... REST_FRAMEWORK = { ... 'DEFAULT_AUTHENTICATION_CLASSES' : ( 'YOUR_APP.authentication.DAASAuthentication' , ), ... } ... This is all.","title":"Settings"}]}