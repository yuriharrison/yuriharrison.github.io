{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DAMD-UI's documentation DAMD-UI's go is to provide an easy way to standardize the Automation's team front-end using Material Design. Allowing customization while keeping the overall design philosophy. Live Showcase Live Showcase is available. Local Showcase You also can run it locally. See the Guide . Quick Start Assuming you already have created the React project. Installation While we're in homologation install the stage branch of DAMD-UI from the git repository. npm i git+ssh://git@github.com:dafiti-group/damd-ui.git#stage Install Yup to create form validation schemas npm i yup Roboto Font Add the following link tag to your html template to include the Roboto Font in your application. < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" /> Basic Setup In your index.tsx add the following imports: // DAMD-UI css import 'damd-ui/dist/assets/style.css' // Setup DAMD-UI basic configuration import 'damd-ui/dist/setup' Sample Now you're ready to create your application using DAMD-UI. Render the following sample component: import React from 'react' import * as Yup from 'yup' // Import Material-UI Components import { Button , MenuList , MenuItem , Typography , Grid } from 'damd-ui/dist/core' // Import ThemeProvider, Default Layout and Paper, // Formik components and TextField Controller import { ThemeProvider , Layout , Paper , Formik , Form , FormikProps , TextField , } from 'damd-ui' // Defining validation schema const schema = Yup . object (). shape ({ name : Yup . string () . min ( 3 ) . required (), }) // Defining initial values const initialValues = { name : '' , } // Defining NavBar to be rendered on the AppBar slot // in the Layout component const NavBar = () => ( < MenuList style = {{ display : 'flex' , flexDirection : 'row' }} > < MenuItem onClick = {() => console . log ( 'Menu Item clicked' )} > Menu Item < /MenuItem> < /MenuList> ) export const App : React . FC = () => { return ( < ThemeProvider > < Layout title = 'My Application' Slot = { NavBar } > < Paper > < Formik initialValues = { initialValues } onSubmit = {() => console . log ( 'Submitting form...' )} validationSchema = { schema } render = {( props : FormikProps < Object > ) => { return ( < Form > < Typography variant = 'h2' > Form Sample < /Typography> < hr /> < Grid item md = { 12 } > < TextField name = 'name' placeholder = 'Richard Winters' label = 'Name' helperText = 'Your name' /> < /Grid> < Grid item md = { 12 } > < Button variant = 'contained' color = 'primary' onClick = {() => props . submitForm ()} > Submit < /Button> < /Grid> < /Form> ) }} /> < /Paper> < /Layout> < /ThemeProvider> ) } export default App The sample above creates a form with a single TextField inside the default Layout provided by DAMD-UI and the default Paper (pre configured with margin and padding). The form has a validation schema which checks if the TextField was field and has at minimum 3 characters. Dark Theme is already available without any configuration. Now, that you have a running application you can learn more about: Using Material-UI components in DAMD-UI here . Using Formik in DAMD-UI here . Engine Material-UI is the package that provides most of the components. Combined with Formik and Yup we provide the following features: Material Design components and Icons Standard theme Dark Theme Pre configured Form Default field controllers Form validation with Yup schema Automatic form state control Standard Layout We highly recommend you to check Material-UI Docs , Formik Docs and Yup Docs . Typescript DAMD-UI is written in typescript. You can make use of the benefits of typescript even if your application doesn't have it. You only need to configure your IDE.","title":"Home"},{"location":"#welcome-to-damd-uis-documentation","text":"DAMD-UI's go is to provide an easy way to standardize the Automation's team front-end using Material Design. Allowing customization while keeping the overall design philosophy.","title":"Welcome to DAMD-UI's documentation"},{"location":"#live-showcase","text":"Live Showcase is available.","title":"Live Showcase"},{"location":"#local-showcase","text":"You also can run it locally. See the Guide .","title":"Local Showcase"},{"location":"#quick-start","text":"Assuming you already have created the React project.","title":"Quick Start"},{"location":"#installation","text":"While we're in homologation install the stage branch of DAMD-UI from the git repository. npm i git+ssh://git@github.com:dafiti-group/damd-ui.git#stage Install Yup to create form validation schemas npm i yup","title":"Installation"},{"location":"#roboto-font","text":"Add the following link tag to your html template to include the Roboto Font in your application. < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />","title":"Roboto Font"},{"location":"#basic-setup","text":"In your index.tsx add the following imports: // DAMD-UI css import 'damd-ui/dist/assets/style.css' // Setup DAMD-UI basic configuration import 'damd-ui/dist/setup'","title":"Basic Setup"},{"location":"#sample","text":"Now you're ready to create your application using DAMD-UI. Render the following sample component: import React from 'react' import * as Yup from 'yup' // Import Material-UI Components import { Button , MenuList , MenuItem , Typography , Grid } from 'damd-ui/dist/core' // Import ThemeProvider, Default Layout and Paper, // Formik components and TextField Controller import { ThemeProvider , Layout , Paper , Formik , Form , FormikProps , TextField , } from 'damd-ui' // Defining validation schema const schema = Yup . object (). shape ({ name : Yup . string () . min ( 3 ) . required (), }) // Defining initial values const initialValues = { name : '' , } // Defining NavBar to be rendered on the AppBar slot // in the Layout component const NavBar = () => ( < MenuList style = {{ display : 'flex' , flexDirection : 'row' }} > < MenuItem onClick = {() => console . log ( 'Menu Item clicked' )} > Menu Item < /MenuItem> < /MenuList> ) export const App : React . FC = () => { return ( < ThemeProvider > < Layout title = 'My Application' Slot = { NavBar } > < Paper > < Formik initialValues = { initialValues } onSubmit = {() => console . log ( 'Submitting form...' )} validationSchema = { schema } render = {( props : FormikProps < Object > ) => { return ( < Form > < Typography variant = 'h2' > Form Sample < /Typography> < hr /> < Grid item md = { 12 } > < TextField name = 'name' placeholder = 'Richard Winters' label = 'Name' helperText = 'Your name' /> < /Grid> < Grid item md = { 12 } > < Button variant = 'contained' color = 'primary' onClick = {() => props . submitForm ()} > Submit < /Button> < /Grid> < /Form> ) }} /> < /Paper> < /Layout> < /ThemeProvider> ) } export default App The sample above creates a form with a single TextField inside the default Layout provided by DAMD-UI and the default Paper (pre configured with margin and padding). The form has a validation schema which checks if the TextField was field and has at minimum 3 characters. Dark Theme is already available without any configuration. Now, that you have a running application you can learn more about: Using Material-UI components in DAMD-UI here . Using Formik in DAMD-UI here .","title":"Sample"},{"location":"#engine","text":"Material-UI is the package that provides most of the components. Combined with Formik and Yup we provide the following features: Material Design components and Icons Standard theme Dark Theme Pre configured Form Default field controllers Form validation with Yup schema Automatic form state control Standard Layout We highly recommend you to check Material-UI Docs , Formik Docs and Yup Docs .","title":"Engine"},{"location":"#typescript","text":"DAMD-UI is written in typescript. You can make use of the benefits of typescript even if your application doesn't have it. You only need to configure your IDE.","title":"Typescript"},{"location":"form/","text":"Forms We have default controllers and forms so you don't need to spend time coding field and form states. Creating a form in DAMD-UI is as declarative as it can get. To achieve this we use Formik to handle the form state and custom controllers that handles labels, placeholders, helper texts and error messages. Step-by-Step First, you need to import Formik and Form then the Field Controllers ( list of Field Controllers ) that you need, in this case just TextField . import { Formik , Form , TextField } from 'damd-ui' We'll also need to import Yup to create our schema validation (optional). import * as Yup from 'yup' Then let's create the validation schema and create a define our form initial values. Although the validation schema is optional, initialValues property from Formik is required, make sure you don't forget any field or else your form might behave in an unwanted manner. So, let's create a validation schema that specifies the field name as a required string and then set the initialValue to an empty string. ... const schema = Yup . object (). shape ({ name : Yup . string (). required (), }) const initialValues = { name : '' , } Now we can build our component. ... const MyForm = () => { const submitHandler = ( values : Object , formikActions : FormikActions < Object > ) => { ... } return ( < Formik initialValues = { initialValues } onSubmit = { submitHandler } validationSchema = { schema } render = {( props : FormikProps < Object > ) => { return ( < Form > < TextField name = 'name' placeholder = 'Placeholder' label = 'Label' helperText = 'Helper text' /> < /Form> ) }} /> ) } In all controllers it's required to fill the props name and label . You also have optionals placeholder , helperText and validate for custom validation. If any controller doesn't passes a validation or a schema rule the error message will show up automatically. If necessary you have all Formik states available to mess with. Learn about Formik If you don't know Formik yet see Formik Docs . List of Field Controllers TextField CheckBox CheckBoxList RadioButton Switch SwitchList Select Autocomplete","title":"Forms"},{"location":"form/#forms","text":"We have default controllers and forms so you don't need to spend time coding field and form states. Creating a form in DAMD-UI is as declarative as it can get. To achieve this we use Formik to handle the form state and custom controllers that handles labels, placeholders, helper texts and error messages.","title":"Forms"},{"location":"form/#step-by-step","text":"First, you need to import Formik and Form then the Field Controllers ( list of Field Controllers ) that you need, in this case just TextField . import { Formik , Form , TextField } from 'damd-ui' We'll also need to import Yup to create our schema validation (optional). import * as Yup from 'yup' Then let's create the validation schema and create a define our form initial values. Although the validation schema is optional, initialValues property from Formik is required, make sure you don't forget any field or else your form might behave in an unwanted manner. So, let's create a validation schema that specifies the field name as a required string and then set the initialValue to an empty string. ... const schema = Yup . object (). shape ({ name : Yup . string (). required (), }) const initialValues = { name : '' , } Now we can build our component. ... const MyForm = () => { const submitHandler = ( values : Object , formikActions : FormikActions < Object > ) => { ... } return ( < Formik initialValues = { initialValues } onSubmit = { submitHandler } validationSchema = { schema } render = {( props : FormikProps < Object > ) => { return ( < Form > < TextField name = 'name' placeholder = 'Placeholder' label = 'Label' helperText = 'Helper text' /> < /Form> ) }} /> ) } In all controllers it's required to fill the props name and label . You also have optionals placeholder , helperText and validate for custom validation. If any controller doesn't passes a validation or a schema rule the error message will show up automatically. If necessary you have all Formik states available to mess with.","title":"Step-by-Step"},{"location":"form/#learn-about-formik","text":"If you don't know Formik yet see Formik Docs .","title":"Learn about Formik"},{"location":"form/#list-of-field-controllers","text":"TextField CheckBox CheckBoxList RadioButton Switch SwitchList Select Autocomplete","title":"List of Field Controllers"},{"location":"material-ui/","text":"Material-UI Components DAMD-UI uses Material-UI in most of the form controllers. If you're building a form we recommend you to learn more about Formik in DAMD-UI or else, if you're building a layout or creating a custom component you can use the Material-UI components (through DAMD-UI) to achieve your goal without having to code everything from scratch. Warning: You DON'T need to install any Material-UI package. Go to Material-UI Docs to learn more about all the components and features. To use Material-UI components in DAMD-UI you just need to change the import path. DAMD-UI have the 3 packages of Material-UI core , styles and icons . For example, if you would import those packages: import { Box , Grid , Paper } from '@material-ui/core' import FavoriteIcon from '@material-ui/icons/Favorite' You should import as follows: import { Box , Grid , Paper } from 'damd-ui/dist/core' import { Favorite } from 'damd-ui/dist/icons' The component attributes are the same. That's necessary to keep basic components centralized and allow future changes without headaches.","title":"Material-UI Components"},{"location":"material-ui/#material-ui-components","text":"DAMD-UI uses Material-UI in most of the form controllers. If you're building a form we recommend you to learn more about Formik in DAMD-UI or else, if you're building a layout or creating a custom component you can use the Material-UI components (through DAMD-UI) to achieve your goal without having to code everything from scratch. Warning: You DON'T need to install any Material-UI package. Go to Material-UI Docs to learn more about all the components and features. To use Material-UI components in DAMD-UI you just need to change the import path. DAMD-UI have the 3 packages of Material-UI core , styles and icons . For example, if you would import those packages: import { Box , Grid , Paper } from '@material-ui/core' import FavoriteIcon from '@material-ui/icons/Favorite' You should import as follows: import { Box , Grid , Paper } from 'damd-ui/dist/core' import { Favorite } from 'damd-ui/dist/icons' The component attributes are the same. That's necessary to keep basic components centralized and allow future changes without headaches.","title":"Material-UI Components"},{"location":"showcase/","text":"Local Showcase To run the showcase locally follow the steps bellow: Clone the repository git clone git@github.com:yuriharrison/damd-ui.git#stage Run the React Application cd damd-ui npm start That's it. It will be available on localhost:3000 . You can check the Showcase code in the src/showcase/ folder.","title":"Local Showcase"},{"location":"showcase/#local-showcase","text":"To run the showcase locally follow the steps bellow:","title":"Local Showcase"},{"location":"showcase/#clone-the-repository","text":"git clone git@github.com:yuriharrison/damd-ui.git#stage","title":"Clone the repository"},{"location":"showcase/#run-the-react-application","text":"cd damd-ui npm start That's it. It will be available on localhost:3000 . You can check the Showcase code in the src/showcase/ folder.","title":"Run the React Application"},{"location":"themes/","text":"Themes DAMD-UI has two themes, the Light Theme and the Dark Theme. You probably won't need to configure anything for it to work on your application. The Material-UI components will change automatically every time you change the theme. Switching themes The Layout component already have an optional switch at the right corner of the AppBar . You also can import the ThemeSwitcher component from damd-ui and place it anywhere you like. Another option is to import useSwitchTheme hook which returns [themeInfo, switcher] , a ThemeInfo object with the information of the current theme and a switcher function that can be called at any moment to switch the theme.","title":"Themes"},{"location":"themes/#themes","text":"DAMD-UI has two themes, the Light Theme and the Dark Theme. You probably won't need to configure anything for it to work on your application. The Material-UI components will change automatically every time you change the theme.","title":"Themes"},{"location":"themes/#switching-themes","text":"The Layout component already have an optional switch at the right corner of the AppBar . You also can import the ThemeSwitcher component from damd-ui and place it anywhere you like. Another option is to import useSwitchTheme hook which returns [themeInfo, switcher] , a ThemeInfo object with the information of the current theme and a switcher function that can be called at any moment to switch the theme.","title":"Switching themes"},{"location":"api/components/layout/","text":"API: Layout Default Layout, a single AppBar with default color and position set to sticky . Props title - Title of the AppBar Slot - Space after the Title hideThemeSwitch - Hide the ThemeSwitch component children - Positioned bellow the AppBar Props = React . PropsWithChildren < { Slot ?: React . FC title : string hideThemeSwitch ?: boolean } > Example import { Layout } from 'damd-ui' ... const App = () => ( ... < Layout title = 'My Application' Slot = { NavBar } hideThemeSwitch > ... < /Layout> ... )","title":"Layout"},{"location":"api/components/layout/#api-layout","text":"Default Layout, a single AppBar with default color and position set to sticky .","title":"API: Layout"},{"location":"api/components/layout/#props","text":"title - Title of the AppBar Slot - Space after the Title hideThemeSwitch - Hide the ThemeSwitch component children - Positioned bellow the AppBar Props = React . PropsWithChildren < { Slot ?: React . FC title : string hideThemeSwitch ?: boolean } >","title":"Props"},{"location":"api/components/layout/#example","text":"import { Layout } from 'damd-ui' ... const App = () => ( ... < Layout title = 'My Application' Slot = { NavBar } hideThemeSwitch > ... < /Layout> ... )","title":"Example"},{"location":"api/components/paper/","text":"API: Paper Default Content Paper to be used inside the Layout component, pre defined margin and padding. The default Paper don't have any customizable option. If you need a different layout use the Paper component from Material-UI in damd-ui/dist/core . Example import { Layout , Paper } from 'damd-ui' ... const App = () => ( ... < Layout title = 'My Application' ... > < Paper > ... < /Paper> < /Layout> ... )","title":"Paper"},{"location":"api/components/paper/#api-paper","text":"Default Content Paper to be used inside the Layout component, pre defined margin and padding. The default Paper don't have any customizable option. If you need a different layout use the Paper component from Material-UI in damd-ui/dist/core .","title":"API: Paper"},{"location":"api/components/paper/#example","text":"import { Layout , Paper } from 'damd-ui' ... const App = () => ( ... < Layout title = 'My Application' ... > < Paper > ... < /Paper> < /Layout> ... )","title":"Example"},{"location":"api/components/themeSwitcher/","text":"API: ThemeSwitcher Icon Switcher to switch between DAMD-UI's Light and Dark themes. Props onChange - Called when the switcher is clicked. Return true to cancel the theme switching event. props = { onChange ?: () => boolean } Example import { ThemeSwitcher } from 'damd-ui' ... const App = () => ( ... < ThemeSwitcher onChange = {() => console . log ( 'ThemeSwitcher triggered!' )} /> ... )","title":"ThemeSwitcher"},{"location":"api/components/themeSwitcher/#api-themeswitcher","text":"Icon Switcher to switch between DAMD-UI's Light and Dark themes.","title":"API: ThemeSwitcher"},{"location":"api/components/themeSwitcher/#props","text":"onChange - Called when the switcher is clicked. Return true to cancel the theme switching event. props = { onChange ?: () => boolean }","title":"Props"},{"location":"api/components/themeSwitcher/#example","text":"import { ThemeSwitcher } from 'damd-ui' ... const App = () => ( ... < ThemeSwitcher onChange = {() => console . log ( 'ThemeSwitcher triggered!' )} /> ... )","title":"Example"},{"location":"api/effects/useSwitchTheme/","text":"API: useSwitchTheme ThemeInfo name - Name of the current theme useSwitchTheme : () => [ ThemeInfo , () => void ] type ThemeName = 'light' | 'dark' type ThemeInfo = { name : ThemeName isDarkTheme : boolean isLightTheme : boolean } Example import { useSwitchTheme } from 'damd-ui' const App = () => { const [ themeInfo , switcher ] = useSwitchTheme () const clickHandler = () => { switcher () console . log ( \"New theme info\" , themeInfo ) } ... }","title":"useSwichTheme"},{"location":"api/effects/useSwitchTheme/#api-useswitchtheme","text":"","title":"API: useSwitchTheme"},{"location":"api/effects/useSwitchTheme/#themeinfo","text":"name - Name of the current theme useSwitchTheme : () => [ ThemeInfo , () => void ] type ThemeName = 'light' | 'dark' type ThemeInfo = { name : ThemeName isDarkTheme : boolean isLightTheme : boolean }","title":"ThemeInfo"},{"location":"api/effects/useSwitchTheme/#example","text":"import { useSwitchTheme } from 'damd-ui' const App = () => { const [ themeInfo , switcher ] = useSwitchTheme () const clickHandler = () => { switcher () console . log ( \"New theme info\" , themeInfo ) } ... }","title":"Example"}]}